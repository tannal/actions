name: Build and Update Skia Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
          - os: macos-latest
            name: macos
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install depot_tools

    - name: Clone Skia
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps

    - name: Build Skia for ${{ matrix.name }}
      run: |
        cd skia
        bin/gn gen out/Release --args='is_official_build=true is_debug=false'
        ninja -C out/Release skia

    - name: Archive Skia artifacts
      uses: actions/upload-artifact@v2
      with:
        name: skia-${{ matrix.name }}
        path: skia/out/Release

  build-android:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install depot_tools

    - name: Clone Skia
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps

    - name: Build Skia for Android
      run: |
        cd skia
        bin/gn gen out/android --args='ndk="/usr/local/lib/android/sdk/ndk-bundle" target_os="android" target_cpu="arm64" is_official_build=true is_debug=false'
        ninja -C out/android skia

    - name: Archive Android artifacts
      uses: actions/upload-artifact@v2
      with:
        name: skia-android
        path: skia/out/android

  release:
    needs: [build, build-android]
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v2

    - name: Zip artifacts
      run: |
        for dir in */; do
          zip -r "${dir%/}.zip" "$dir"
        done

    - name: Get or create release
      id: get_or_create_release
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const tag = `v${process.env.GITHUB_SHA.substr(0, 7)}`;
          
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag
            });
            console.log(`Release found: ${release.data.id}`);
            return release.data;
          } catch (error) {
            if (error.status === 404) {
              console.log('Release not found. Creating a new one.');
              const release = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: 'Automated release',
                draft: false,
                prerelease: false
              });
              return release.data;
            }
            throw error;
          }

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release_id=${{ fromJson(steps.get_or_create_release.outputs.result).id }}
        for asset in *.zip; do
          echo "Uploading $asset..."
          curl -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/zip" \
               --data-binary @"$asset" \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$asset")"
        done